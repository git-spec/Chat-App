<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta http-equiv="X-UA-Compatible" content="ie=edge" />
		<!-- Font Awesome -->
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css"
			integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk="
			crossorigin="anonymous"
		/>
		<!-- CSS -->
		<link rel="stylesheet" href="/css/style.css" />
		<title>ChatApp</title>
	</head>
	<body>
		<div class="join-container">
			<header class="join-header">
				<h1>ChatApp</h1>
			</header>
			<main class="join-main">
				<form method="POST" action="/">
					<fieldset id="register" style="display: none;">
						<legend>Register</legend>
						<a href="#">Login</a>
						<div class="form-control">
							<label for="firstname">Firstname</label>
							<input type="text" name="firstname" id="firstname" placeholder="Enter Firstname" required />
							<label for="lastname">Lastname</label>
							<input type="text" name="lastname" id="lastname" placeholder="Enter Lastname" required />
							<label for="username">Username</label>
							<input type="text" name="username" id="reg-username" placeholder="Enter Username" required />
							<label for="email">Email</label>
							<input type="email" name="email" id="email" placeholder="Enter Email" required />
							<label for="password">Password</label>
							<input type="password" name="password" id="reg-password" placeholder="Enter Password" required />
							<label for="repassword">Confirmation</label>
							<input type="password" name="repassword" id="repassword" placeholder="Confirm Password" required />
						</div>
						<button type="submit" class="btn" id="register-btn">Join Chat</button>
					</fieldset>
					<fieldset id="login">
						<legend>Login</legend>
						<a href="#">Register</a>
						<div class="form-control">
							<label for="username">Username</label>
							<input type="text" name="username" id="log-username" placeholder="Enter Username" required />
							<label for="password">Password</label>
							<input type="password" name="password" id="log-password" placeholder="Enter Password" required />
						</div>
						<button type="submit" class="btn" id="login-btn">Select Room</button>
					</fieldset>
				</form>
			</main>
		</div>
		<script>
/* ************************************************************ EVENTS ******************************************************* */
			// get fieldsets
			const loginField = document.querySelector('#login');
			const registerField = document.querySelector('#register');
			// switch from register to login page
			document.querySelector('#register > a').addEventListener('click', e => {
				e.preventDefault();
				if(loginField.style.display === 'none') {
					loginField.style.display = 'block';
					e.target.parentElement.style.display = 'none';
				};
			});
			// switch from login to register page
			document.querySelector('#login > a').addEventListener('click', e => {
				e.preventDefault();
				if(registerField.style.display === 'none') {
					registerField.style.display = 'block';
					e.target.parentElement.style.display = 'none';
				};
			});

			// get register form for input data
			const registerForm = document.querySelector('#register > .form-control');
			// input data
			const firstName = registerForm.children[1];
			const lastName = registerForm.children[3];
			const userName = registerForm.children[5];
			const email = registerForm.children[7];
			const password = registerForm.children[9];
			const repassword = registerForm.children[11];
			const inputList = [firstName, lastName, userName, email, password, repassword];
			// check previous input by focusin
			lastName.addEventListener('focusin', e => {
				if (!firstName.value && firstName.previousElementSibling.tagName !== 'SPAN') {
					firstName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
			})
			userName.addEventListener('focusin', e => {
				if (!firstName.value && firstName.previousElementSibling.tagName !== 'SPAN') {
					firstName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!lastName.value && lastName.previousElementSibling.tagName !== 'SPAN') {
					lastName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
			})
			email.addEventListener('focusin', e => {
				if (!firstName.value && firstName.previousElementSibling.tagName !== 'SPAN') {
					firstName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!lastName.value && lastName.previousElementSibling.tagName !== 'SPAN') {
					lastName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!userName.value && userName.previousElementSibling.tagName !== 'SPAN') {
					userName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
			})
			password.addEventListener('focusin', e => {
				if (!firstName.value && firstName.previousElementSibling.tagName !== 'SPAN') {
					firstName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!lastName.value && lastName.previousElementSibling.tagName !== 'SPAN') {
					lastName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!userName.value && userName.previousElementSibling.tagName !== 'SPAN') {
					userName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!email.value && email.previousElementSibling.tagName !== 'SPAN') {
					email.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
			})
			repassword.addEventListener('focusin', e => {
				if (!firstName.value && firstName.previousElementSibling.tagName !== 'SPAN') {
					firstName.pinsertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!lastName.value && lastName.previousElementSibling.tagName !== 'SPAN') {
					lastName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!userName.value && userName.previousElementSibling.tagName !== 'SPAN') {
					userName.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!email.value && email.previousElementSibling.tagName !== 'SPAN') {
					email.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
				if (!password.value && password.previousElementSibling.tagName !== 'SPAN') {
					password.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
				}
			})
			// check input by focusout
			inputList.forEach(item => {
				item.addEventListener('focusout', e => {
					if (!e.target.value && e.target.previousElementSibling.tagName !== 'SPAN') {
						e.target.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
					} else if (e.target.value && e.target.previousElementSibling.tagName === 'SPAN') {
						e.target.previousElementSibling.remove();
					};
				});
			});
			// check active input
			inputList.forEach(item => {
				if(item !== password) {
					item.addEventListener('input', e => {
						e.preventDefault;
						if (e.target.value && e.target.previousElementSibling.tagName === 'SPAN') {
							e.target.previousElementSibling.remove();
						};
					});
				} else {
					// password strength level
					// const lev1 = document.createElement('div');
					// const lev2 = document.createElement('div');
					// const levWrap = document.createElement('div').className = "lev";
					// levWrap.appendChild('lev1').appendChild('lev2');
					// const pwdSafetyWrap = document.createElement('div').className = "pwdSafetyWrap";
					// pwdSafetyWrap.appendChild('levWrap');
					// regular expressions for password strength
					const strongStrength = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})', 'g');
					const mediumStrength = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{6,})', 'g');
					const lowStrength = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{4,})', 'g');
					const noStrength = new RegExp('^(?=.*[a-z])(?=.*[A-Z])|(?=.*[0-9])(?=.{2,})', 'g');
					item.addEventListener('input', e => {
						e.preventDefault;
						if (e.target.value && e.target.previousElementSibling.tagName !== 'SPAN' &&  e.target.previousElementSibling.tagName !== 'DIV') {
							e.target.insertAdjacentHTML('beforebegin', '<div class="pwd-safety-wrap"><span>Safety</span><div class="lev"><div></div><div></div></div><span></span></div>');
						} else if (e.target.value && e.target.previousElementSibling.tagName === 'SPAN' && e.target.previousElementSibling.tagName !== 'DIV') {
							e.target.previousElementSibling.remove();
							e.target.insertAdjacentHTML('beforebegin', '<div class="pwd-safety-wrap"><span>Safety</span><div class="lev"><div></div><div></div></div><span></span></div>');
						} else if (!e.target.value && e.target.previousElementSibling.tagName === 'DIV') {
								e.target.previousElementSibling.remove();
						};
						const lev = document.querySelector('.lev');
						// check strength of password
						if (strongStrength.test(e.target.value)) {
							lev.previousElementSibling.style.display = "inline-block";
							lev.classList = "lev success";
							lev.nextElementSibling.classList = "success";
							lev.nextElementSibling.innerText = "100%";
							lev.lastElementChild.classList = "lev100 success";
						} else if (mediumStrength.test(e.target.value)) {
							lev.previousElementSibling.style.display = "inline-block";
							lev.classList = "lev success";
							lev.nextElementSibling.classList = "success";
							lev.nextElementSibling.innerText = "80%";
							lev.lastElementChild.classList = "lev80 success";
						} else if (mediumStrength.test(e.target.value)) {
							lev.previousElementSibling.style.display = "inline-block";
							lev.classList = "lev success";
							lev.nextElementSibling.classList = "success";
							lev.nextElementSibling.innerText = "60%";
							lev.lastElementChild.classList = "lev60 success";
						} else if (lowStrength.test(e.target.value)) {
							lev.previousElementSibling.style.display = "inline-block";
							lev.classList = "lev error";
							lev.nextElementSibling.classList = "error";
							lev.nextElementSibling.innerText = "40%";
							lev.lastElementChild.classList = "lev40 error";
						} else if (noStrength.test(e.target.value)) {
							lev.previousElementSibling.style.display = "inline-block";
							lev.classList = "lev error";
							lev.nextElementSibling.classList = "error";
							lev.nextElementSibling.innerText = "20%";
							lev.lastElementChild.classList = "lev20 error";
						} else {
							lev.previousElementSibling.style.display = "inline-block";
							lev.classList = "lev error";
							lev.nextElementSibling.classList = "error";
							lev.nextElementSibling.innerText = "0%";
							lev.lastElementChild.classList = "lev0 error";
						};
					});
				};
			});
			// register user
			document.querySelector('#register-btn').addEventListener('click', e => {
				e.preventDefault();
				// input data
				// const firstName = registerForm.children[1];
				// const lastName = registerForm.children[3];
				// const userName = registerForm.children[5];
				// const email = registerForm.children[7];
				// const repassword = registerForm.children[11];
				// check if input data are filled
				if(firstName.value.trim() && lastName.value.trim() && userName.value.trim() && email.value.trim() && password.value && repassword.value) {
					if(password.value === repassword.value) {
						// user object with input data
						const USER = {
							firstname: firstName.value.trim(),
							lastname: lastName.value.trim(),
							username: userName.value.trim(),
							email: email.value.trim(),
							password: password.value,
							repassword: repassword.value
						};
						request('/', USER);
						// empty inputs
						firstName.value = '';
						lastName.value = '';
						userName.value = '';
						email.value = '';
						password.value = '';
						repassword.value = '';
					} else {
						alert("Passwords do not match");
					}
				} else {
					alert("Not all inputs are filled");
					inputList.forEach(item => {
						if (item.tagName === 'INPUT' && !item.value && item.previousElementSibling.tagName !== 'SPAN') {
							item.insertAdjacentHTML('beforebegin', '<span style="color: var(--error-color); float: right;">required</span>');
						};
					});
				};
			});

			// login user
			document.querySelector('#login-btn').addEventListener('click', e => {
				e.preventDefault();
				// get login form for input data
				const loginForm = loginField.lastElementChild.previousElementSibling;
				// input data
				const userName = loginForm.children[1];
				const password = loginForm.children[3];
				if(userName.value.trim() && password.value) {
					// user object with input data
					const USER = {
						username: userName.value.trim(),
						password: password.value
					};
					request('/', USER);
					// empty inputs
					userName.value = '';
					password.value = '';
				} else {
					alert("Not all inputs are filled");
				};
			});

/* ************************************************************ FUNCTION ******************************************************* */
			// post request to server
			function request(url, data) {
					fetch(url, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				}).then(response => {
					if(response.status === 200) {
						response.json().then(data => {
							// input alerts
							switch (data) {
								case 1:
									window.location = "/room";
									break;
								case 2:
									alert("The Email is already registered.");
									break;
								case 3:
									alert("You could'nt been found or your password is not correct.");
									break;
								case 4:
									alert("Server error!");
									break;
								case 5:
									alert("Missing entries!");
									break;
								case 6:
									alert("You are not verified yet.");
									break;
								case 6:
									alert("Your account is not verified yet!\nPlease check your emails.");
									break;
								case 7:
									alert("Registration successful!\nPlease check your emails to verify your account.");
									break;
								default:
									alert("Server error!");
									break;
							};
						}).catch(err => {
							alert(err.message);
						});
					} else {
						alert("Server Error");
					};
				}).catch(err => {
					alert(err.message);
				});
			};
		</script>
	</body>
</html>
